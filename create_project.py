import os
import sys
from pathlib import Path


def create_project_structure():
    # Define root directories
    base_dirs = [
        'apps',
        'static/assets/css',
        'static/assets/js',
        'static/assets/images',
        'templates/components',
        'media',
        'docker/development',
        'docker/production',
        'config/settings',
    ]

    # Define Django apps
    apps = ['core', 'client', 'driver', 'payments', 'notifications', 'adminpanel']

    # Create root directories
    for directory in base_dirs:
        os.makedirs(directory, exist_ok=True)
        print(f"âœ“ Created directory: {directory}")

    # Create app structure for each app
    for app in apps:
        app_path = f"apps/{app}"
        os.makedirs(f"{app_path}/tests", exist_ok=True)

        # Create app files
        app_files = [
            '__init__.py',
            'admin.py',
            'apps.py',
            'forms.py',
            'models.py',
            'urls.py',
            'views.py',
            'tests/__init__.py',
            'tests/test_models.py',
            'tests/test_views.py'
        ]

        for file in app_files:
            file_path = f"{app_path}/{file}"
            Path(file_path).touch()
            print(f"âœ“ Created app file: {file_path}")

    # Create template files
    template_files = {
        'templates/base.html': '',
        'templates/components/navigation.html': ''
    }

    # Create config files
    config_files = [
        '__init__.py',
        'asgi.py',
        'urls.py',
        'wsgi.py',
        'settings/base.py',
        'settings/development.py',
        'settings/production.py'
    ]

    # Create root files
    root_files = [
        '.env',
        'requirements.txt',
        'manage.py'
    ]

    # Create Docker files
    docker_files = [
        'docker/development/Dockerfile',
        'docker/development/entrypoint.sh',
        'docker/production/Dockerfile'
    ]

    # Create all files
    all_files = {**template_files,
                 **{f"config/{f}": '' for f in config_files},
                 **{f: '' for f in root_files},
                 **{f: '' for f in docker_files}}

    for file, content in all_files.items():
        Path(file).touch()
        print(f"âœ“ Created file: {file}")

    # Write .gitignore content
    gitignore_content = """# Django
*.log
*.pot
*.pyc
__pycache__/
db.sqlite3
media/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Static files
staticfiles/

# IDE
.idea/
.vscode/

# OS
Thumbs.db
.DS_Store
"""
    with open('.gitignore', 'w') as f:
        f.write(gitignore_content)
    print("âœ“ Created .gitignore with comprehensive rules")

    # Write minimal settings/base.py
    base_settings = """\"\"\"
Django base settings for GoodMan Safari Pro project.
Generated by structure automation script.
\"\"\"

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-*dummy-key-for-dev*')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local apps
    'apps.core',
    'apps.client',
    'apps.driver',
    'apps.payments',
    'apps.notifications',
    'apps.adminpanel',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
"""
    with open('config/settings/base.py', 'w') as f:
        f.write(base_settings)
    print("âœ“ Created minimal config/settings/base.py")

    # Write development settings
    dev_settings = """\"\"\"
Development specific settings for GoodMan Safari Pro
\"\"\"

from .base import *

# Debug mode
DEBUG = True

# Allowed hosts
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Development apps
INSTALLED_APPS += [
    'debug_toolbar',
]

# Middleware for development
MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')

# Debug toolbar config
INTERNAL_IPS = ['127.0.0.1']
"""
    with open('config/settings/development.py', 'w') as f:
        f.write(dev_settings)

    # Write production settings
    prod_settings = """\"\"\"
Production specific settings for GoodMan Safari Pro
\"\"\"

from .base import *

# Security settings
DEBUG = False
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = True

# Allowed hosts (update with production domain)
ALLOWED_HOSTS = ['your-production-domain.com']

# Database (configure your production DB)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'mydatabase',
#         'USER': 'mydatabaseuser',
#         'PASSWORD': 'mypassword',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Static files in production
STATIC_ROOT = '/var/www/goodman-safari/static'
MEDIA_ROOT = '/var/www/goodman-safari/media'
"""
    with open('config/settings/production.py', 'w') as f:
        f.write(prod_settings)

    # Write minimal manage.py
    manage_py_content = """#!/usr/bin/env python
\"\"\"Django's command-line utility for administrative tasks.\"\"\"
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
"""
    with open('manage.py', 'w') as f:
        f.write(manage_py_content)
    os.chmod('manage.py', 0o755)  # Make executable

    # Write minimal Dockerfile for development
    dev_dockerfile = """# Development Dockerfile
FROM python:3.11-slim

ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
"""
    with open('docker/development/Dockerfile', 'w') as f:
        f.write(dev_dockerfile)

    # Write minimal entrypoint script
    entrypoint = """#!/bin/bash
# Development entrypoint script
set -e

# Wait for database if needed
# while ! nc -z $DB_HOST $DB_PORT; do
#   echo "Waiting for PostgreSQL..."
#   sleep 1
# done

python manage.py migrate
python manage.py runserver 0.0.0.0:8000
"""
    with open('docker/development/entrypoint.sh', 'w') as f:
        f.write(entrypoint)
    os.chmod('docker/development/entrypoint.sh', 0o755)

    print("\nâœ… Project structure created successfully!")
    print("\nNext steps:")
    print("1. Create virtual environment: python -m venv venv")
    print("2. Activate environment:")
    print("   - Windows: venv\\Scripts\\activate")
    print("   - Unix/MacOS: source venv/bin/activate")
    print("3. Install Django: pip install django")
    print("4. Register apps in config/settings/base.py (already partially done)")
    print("5. Create initial migrations: python manage.py makemigrations")
    print("6. Apply migrations: python manage.py migrate")
    print("7. Run development server: python manage.py runserver")
    print("\nFor Docker development:")
    print("1. Build image: docker build -f docker/development/Dockerfile -t goodman-dev .")
    print("2. Run container: docker run -p 8000:8000 -v $(pwd):/app goodman-dev")


if __name__ == "__main__":
    print("ðŸš€ Creating modern Django project structure for GoodMan Safari Pro...\n")
    create_project_structure()