# Generated by Django 5.0.7 on 2025-09-23 05:58

import bookings.models
import cloudinary.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(help_text="Customer's first name", max_length=100)),
                ('last_name', models.CharField(help_text="Customer's last name", max_length=100)),
                ('email', models.EmailField(help_text="Customer's email address", max_length=254, unique=True)),
                ('phone_number', models.CharField(help_text="Customer's phone number", max_length=20, validators=[bookings.models.validate_phone_number])),
                ('normalized_phone', models.CharField(blank=True, help_text='E.164 formatted phone number', max_length=20)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], help_text="Customer's gender", max_length=1, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text="Customer's date of birth", null=True)),
                ('nationality', models.CharField(blank=True, help_text="Customer's nationality", max_length=100, null=True)),
                ('passport_number', models.CharField(blank=True, help_text="Customer's passport number", max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this customer account is active')),
                ('is_vip', models.BooleanField(default=False, help_text='VIP customer status')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
            },
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the destination', max_length=150, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of name', max_length=170, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the destination')),
                ('location', models.CharField(blank=True, help_text='Physical location of the destination', max_length=200)),
                ('price_per_person', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Price per person in KES', max_digits=10)),
                ('destination_type', models.CharField(choices=[('TRANSFER', 'Airport Transfer'), ('EXCURSION', 'Excursion'), ('TOUR', 'Tour / Safari')], default='TOUR', help_text='Type of destination', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this destination is currently available')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this destination on homepage')),
                ('image', models.ImageField(blank=True, help_text='Primary image for the destination', null=True, upload_to='destinations/')),
                ('video', models.FileField(blank=True, help_text='Promotional video for the destination', null=True, upload_to='destinations/videos/')),
                ('image_url', models.URLField(blank=True, help_text='External image URL as fallback', null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='GPS latitude coordinate', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='GPS longitude coordinate', max_digits=9, null=True)),
            ],
            options={
                'verbose_name': 'Destination',
                'verbose_name_plural': 'Destinations',
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text="Driver's full name", max_length=150)),
                ('phone_number', models.CharField(help_text="Driver's phone number", max_length=20, validators=[bookings.models.validate_phone_number])),
                ('normalized_phone', models.CharField(blank=True, help_text='E.164 formatted phone number', max_length=20)),
                ('license_number', models.CharField(help_text="Driver's license number", max_length=50, unique=True)),
                ('license_type', models.CharField(choices=[('PROFESSIONAL', 'Professional'), ('COMMERCIAL', 'Commercial')], default='COMMERCIAL', help_text='Type of driving license', max_length=20)),
                ('license_expiry', models.DateField(blank=True, help_text='License expiry date', null=True)),
                ('available', models.BooleanField(default=True, help_text='Whether the driver is currently available')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this driver account is active')),
                ('is_verified', models.BooleanField(default=False, help_text='Driver has been verified by admin')),
                ('profile_picture', models.ImageField(blank=True, help_text="Driver's profile picture", null=True, upload_to='drivers/')),
                ('experience_years', models.PositiveIntegerField(default=0, help_text='Years of driving experience')),
                ('vehicle', models.CharField(blank=True, help_text='Vehicle model', max_length=150, null=True)),
                ('vehicle_plate', models.CharField(blank=True, help_text='Vehicle license plate number', max_length=20, null=True)),
                ('vehicle_capacity', models.PositiveIntegerField(default=4, help_text='Vehicle passenger capacity')),
                ('bio', models.TextField(blank=True, help_text="Driver's professional bio", null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=Decimal('0.0'), help_text='Average customer rating (0.0-5.0)', max_digits=3)),
                ('total_trips', models.PositiveIntegerField(default=0, help_text='Total number of completed trips')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total earnings from all trips', max_digits=10)),
                ('user', models.OneToOneField(blank=True, help_text='Linked user account for the driver', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='driver', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Driver',
                'verbose_name_plural': 'Drivers',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking_type', models.CharField(choices=[('TRANSFER', 'Airport Transfer'), ('EXCURSION', 'Excursion'), ('TOUR', 'Tour / Safari')], help_text='Type of booking', max_length=20)),
                ('booking_reference', models.CharField(default=bookings.models.generate_booking_reference, editable=False, help_text='Unique booking reference', max_length=50, unique=True)),
                ('num_adults', models.PositiveIntegerField(default=1, help_text='Number of adult passengers')),
                ('num_children', models.PositiveIntegerField(default=0, help_text='Number of child passengers')),
                ('num_infants', models.PositiveIntegerField(default=0, help_text='Number of infant passengers')),
                ('pickup_location', models.CharField(blank=True, help_text='Pickup location', max_length=200, null=True)),
                ('dropoff_location', models.CharField(blank=True, help_text='Drop-off location', max_length=200, null=True)),
                ('travel_date', models.DateField(help_text='Date of travel')),
                ('travel_time', models.TimeField(default=django.utils.timezone.now, help_text='Preferred pickup time')),
                ('return_date', models.DateField(blank=True, help_text='Return date for multi-day trips', null=True)),
                ('return_time', models.TimeField(blank=True, help_text='Return time for multi-day trips', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed'), ('NO_SHOW', 'No Show')], default='PENDING', help_text='Current status of the booking', max_length=20)),
                ('special_requests', models.TextField(blank=True, help_text='Special customer requests', null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about the booking', null=True)),
                ('booking_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the booking was made')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total price for the booking', max_digits=10)),
                ('is_paid', models.BooleanField(default=False, help_text='Whether payment has been completed')),
                ('is_cancelled', models.BooleanField(default=False, help_text='Whether the booking has been cancelled')),
                ('cancellation_reason', models.TextField(blank=True, help_text='Reason for cancellation', null=True)),
                ('customer', models.ForeignKey(help_text='Customer who made the booking', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='bookings.customer')),
                ('destination', models.ForeignKey(blank=True, help_text='Destination for the booking', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.destination')),
                ('driver', models.ForeignKey(blank=True, help_text='Driver assigned to this booking', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.driver')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Tour title', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of title', max_length=220, unique=True)),
                ('tagline', models.CharField(blank=True, help_text='Short catchy phrase for the tour', max_length=300, null=True)),
                ('description', models.TextField(default='No description available', help_text='Detailed description of the destination')),
                ('highlights', models.TextField(blank=True, help_text='Key highlights of the tour', null=True)),
                ('itinerary', models.TextField(blank=True, help_text='Day-by-day itinerary', null=True)),
                ('inclusions', models.TextField(blank=True, help_text="What's included in the tour", null=True)),
                ('exclusions', models.TextField(blank=True, help_text="What's not included in the tour", null=True)),
                ('price_per_person', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Price per person in KES', max_digits=10)),
                ('discount_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discounted price if applicable', max_digits=10)),
                ('duration_days', models.PositiveIntegerField(default=1, help_text='Duration in days')),
                ('duration_nights', models.PositiveIntegerField(default=0, help_text='Number of nights for the tour')),
                ('max_group_size', models.PositiveIntegerField(default=10, help_text='Maximum number of people per tour')),
                ('min_group_size', models.PositiveIntegerField(default=1, help_text='Minimum number of people per tour')),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MODERATE', 'Moderate'), ('CHALLENGING', 'Challenging'), ('EXTREME', 'Extreme')], default='EASY', help_text='Difficulty level of the tour', max_length=20)),
                ('category', models.CharField(choices=[('ADVENTURE', 'Adventure Safari'), ('WILDLIFE', 'Wildlife Safari'), ('CULTURAL', 'Cultural Tour'), ('BEACH', 'Beach Holiday'), ('MOUNTAIN', 'Mountain Climbing'), ('CITY', 'City Tour')], default='WILDLIFE', help_text='Category of the tour', max_length=20)),
                ('available', models.BooleanField(default=True, help_text='Whether this tour is currently bookable')),
                ('featured', models.BooleanField(default=False, help_text='Whether to feature this tour on homepage')),
                ('is_popular', models.BooleanField(default=False, help_text='Whether this is a popular tour')),
                ('max_advance_booking_days', models.PositiveIntegerField(default=365, help_text='Maximum days in advance for booking')),
                ('image', cloudinary.models.CloudinaryField(blank=True, help_text='Primary tour image', max_length=255, null=True, verbose_name='image')),
                ('video', cloudinary.models.CloudinaryField(blank=True, help_text='Tour promotional video', max_length=255, null=True, verbose_name='video')),
                ('image_url', models.URLField(blank=True, help_text='External image URL as fallback', null=True)),
                ('gallery_images', models.JSONField(blank=True, default=list, help_text='List of additional image URLs')),
                ('departure_point', models.CharField(default='Nairobi', help_text='Tour departure location', max_length=200)),
                ('destinations_visited', models.TextField(blank=True, help_text='List of destinations visited', null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the tour has been approved')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the tour was approved', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved this tour', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_tours', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this tour', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tours', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tour',
                'verbose_name_plural': 'Tours',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Rating given (1-5)')),
                ('title', models.CharField(help_text='Review title', max_length=200)),
                ('comment', models.TextField(help_text='Review comment')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this review is public')),
                ('is_verified', models.BooleanField(default=False, help_text='Review has been verified as genuine')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the review was verified', null=True)),
                ('booking', models.ForeignKey(help_text='Booking associated with this review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.booking')),
                ('customer', models.ForeignKey(help_text='Customer who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.customer')),
                ('driver', models.ForeignKey(blank=True, help_text='Driver being reviewed', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.driver')),
                ('tour', models.ForeignKey(blank=True, help_text='Tour being reviewed', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.tour')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guest_full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('guest_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('guest_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('normalized_guest_phone', models.CharField(blank=True, max_length=20)),
                ('adults', models.PositiveIntegerField(default=1)),
                ('children', models.PositiveIntegerField(default=0)),
                ('days', models.PositiveIntegerField(default=1)),
                ('travel_date', models.DateField(default=django.utils.timezone.now)),
                ('billing_line1', models.CharField(default='Nairobi', max_length=255)),
                ('billing_city', models.CharField(default='Nairobi', max_length=100)),
                ('billing_state', models.CharField(default='Nairobi', max_length=100)),
                ('billing_postal_code', models.CharField(default='00100', max_length=20)),
                ('billing_country_code', models.CharField(default='KE', max_length=3)),
                ('provider', models.CharField(choices=[('MPESA', 'M-PESA'), ('PAYSTACK', 'Paystack'), ('PAYPAL', 'PayPal'), ('CARD', 'Card Payment'), ('AIRTEL', 'Airtel Money'), ('CASH', 'Cash'), ('BANK', 'Bank Transfer'), ('OTHER', 'Other')], default='PAYSTACK', max_length=20)),
                ('method', models.CharField(choices=[('MPESA', 'M-PESA'), ('PAYSTACK', 'Paystack'), ('PAYPAL', 'PayPal'), ('CARD', 'Card Payment'), ('AIRTEL', 'Airtel Money'), ('CASH', 'Cash'), ('BANK', 'Bank Transfer'), ('OTHER', 'Other')], default='PAYSTACK', max_length=20)),
                ('currency', models.CharField(default='KES', max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('phone_number', models.CharField(blank=True, default='', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('PARTIAL_REFUND', 'Partial Refund')], default='PENDING', max_length=20)),
                ('reference', models.CharField(db_index=True, default='', max_length=100)),
                ('access_code', models.CharField(blank=True, max_length=255, null=True)),
                ('paystack_transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_id', models.CharField(blank=True, default='', max_length=100)),
                ('authorization_code', models.CharField(blank=True, default='', max_length=100)),
                ('raw_response', models.JSONField(blank=True, null=True)),
                ('webhook_verified', models.BooleanField(default=False)),
                ('webhook_received_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(default='Payment for Tour')),
                ('paid_on', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True, null=True)),
                ('payment_channel', models.CharField(blank=True, max_length=50, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('refund_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('refund_reason', models.TextField(blank=True, null=True)),
                ('refunded_on', models.DateTimeField(blank=True, null=True)),
                ('booking', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='bookings.booking')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='bookings.customer')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
                ('tour', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='bookings.tour')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='tour',
            field=models.ForeignKey(blank=True, help_text='Tour for the booking', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.tour'),
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('destination', models.CharField(help_text='Trip destination', max_length=200)),
                ('date', models.DateField(help_text='Date of the trip')),
                ('start_time', models.TimeField(default=django.utils.timezone.now, help_text='Trip start time')),
                ('end_time', models.TimeField(blank=True, help_text='Trip end time', null=True)),
                ('earnings', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Earnings from the trip', max_digits=10)),
                ('distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance traveled in kilometers', max_digits=8, null=True)),
                ('fuel_consumed', models.DecimalField(blank=True, decimal_places=2, help_text='Fuel consumed in liters', max_digits=8, null=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', help_text='Current status of the trip', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the trip', null=True)),
                ('customer_rating', models.PositiveIntegerField(blank=True, help_text='Customer rating (1-5)', null=True)),
                ('customer_feedback', models.TextField(blank=True, help_text='Customer feedback about the trip', null=True)),
                ('booking', models.ForeignKey(blank=True, help_text='Booking associated with this trip', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='bookings.booking')),
                ('driver', models.ForeignKey(help_text='Driver who completed the trip', on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='bookings.driver')),
            ],
            options={
                'verbose_name': 'Trip',
                'verbose_name_plural': 'Trips',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Video title', max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of title', max_length=275, unique=True)),
                ('description', models.TextField(blank=True, help_text='Video description')),
                ('file', models.FileField(help_text='Video file', upload_to='videos/')),
                ('thumbnail', models.ImageField(blank=True, help_text='Video thumbnail image', null=True, upload_to='video_thumbnails/')),
                ('duration', models.DurationField(blank=True, help_text='Video duration', null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price for paid videos', max_digits=10, null=True)),
                ('category', models.CharField(choices=[('DESTINATION', 'Destination Video'), ('TESTIMONIAL', 'Customer Testimonial'), ('ACTIVITY', 'Tour Activity'), ('PROMOTION', 'Promotional Video'), ('DRIVER', 'Driver Profile')], default='DESTINATION', help_text='Video category', max_length=20)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this video')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this video is active')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times the video has been viewed')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('destination', models.ForeignKey(blank=True, help_text='Destination this video is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='bookings.destination')),
                ('tour', models.ForeignKey(blank=True, help_text='Tour this video is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='bookings.tour')),
            ],
            options={
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the person sending the message', max_length=150)),
                ('email', models.EmailField(help_text='Email address of the sender', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Phone number of the sender', max_length=20, null=True, validators=[bookings.models.validate_phone_number])),
                ('subject', models.CharField(help_text='Subject of the message', max_length=200)),
                ('message', models.TextField(help_text='Message content')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', help_text='Priority level of the message', max_length=10)),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether this message has been resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the message was resolved', null=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='User this message is assigned to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_messages', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved this message', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contact Message',
                'verbose_name_plural': 'Contact Messages',
                'indexes': [models.Index(fields=['priority'], name='bookings_co_priorit_b4ac58_idx'), models.Index(fields=['is_resolved'], name='bookings_co_is_reso_80e63b_idx'), models.Index(fields=['assigned_to'], name='bookings_co_assigne_41fd6e_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['category'], name='bookings_to_categor_015e22_idx'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['difficulty'], name='bookings_to_difficu_cde77a_idx'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['is_popular'], name='bookings_to_is_popu_1fd2ed_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='bookings_re_rating_a9b587_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_public'], name='bookings_re_is_publ_70a99a_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified'], name='bookings_re_is_veri_9c3d62_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['tour', 'rating'], name='bookings_re_tour_id_a69bfb_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['driver', 'rating'], name='bookings_re_driver__7921fd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('customer', 'booking')},
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['reference'], name='bookings_pa_referen_7743f4_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['paystack_transaction_id'], name='bookings_pa_paystac_ac848b_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='bookings_pa_status_e13a34_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['created_at'], name='bookings_pa_created_0175e9_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['user', 'status'], name='bookings_pa_user_id_d4eeac_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['customer', 'status'], name='bookings_pa_custome_4825f3_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_reference'], name='bookings_bo_booking_8a7545_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['travel_date'], name='bookings_bo_travel__83d735_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='bookings_bo_status_233e96_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['customer', 'travel_date'], name='bookings_bo_custome_186a5b_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['driver', 'date'], name='bookings_tr_driver__31c45f_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['status'], name='bookings_tr_status_491e53_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['date'], name='bookings_tr_date_8257ad_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['category'], name='bookings_vi_categor_3d168d_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['is_featured'], name='bookings_vi_is_feat_093d82_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['view_count'], name='bookings_vi_view_co_5d688b_idx'),
        ),
    ]
