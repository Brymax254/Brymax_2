# Generated by Django 5.0.7 on 2025-09-25 19:57

import bookings.models
import cloudinary.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.CharField(blank=True, help_text='Physical location', max_length=200)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='GPS latitude coordinate', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-90')), django.core.validators.MaxValueValidator(Decimal('90'))])),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='GPS longitude coordinate', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-180')), django.core.validators.MaxValueValidator(Decimal('180'))])),
                ('name', models.CharField(max_length=150, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=170, unique=True)),
                ('description', models.TextField(blank=True)),
                ('destination_type', models.CharField(choices=[('TRANSFER', 'Airport Transfer'), ('EXCURSION', 'Excursion'), ('TOUR', 'Tour / Safari'), ('ATTRACTION', 'Attraction'), ('ACCOMMODATION', 'Accommodation')], default='TOUR', max_length=20)),
                ('price_per_person', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='KES', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('video', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='video')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('gallery_images', models.JSONField(blank=True, default=list, help_text='List of additional image URLs')),
                ('eco_friendly', models.BooleanField(default=False)),
                ('carbon_footprint_per_visit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Estimated carbon footprint per visit in kg CO2', max_digits=10)),
                ('sustainability_certifications', models.JSONField(blank=True, default=list, help_text='List of sustainability certifications')),
                ('wheelchair_accessible', models.BooleanField(default=False)),
                ('accessibility_features', models.JSONField(blank=True, default=dict, help_text='Detailed accessibility features')),
                ('health_safety_measures', models.JSONField(blank=True, default=dict, help_text='Health and safety measures implemented')),
                ('covid19_protocols', models.JSONField(blank=True, default=dict, help_text='COVID-19 specific protocols')),
            ],
            options={
                'verbose_name': 'Destination',
                'verbose_name_plural': 'Destinations',
            },
        ),
        migrations.CreateModel(
            name='TourCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
            ],
            options={
                'verbose_name': 'Tour Category',
                'verbose_name_plural': 'Tour Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BookingCustomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=20)),
                ('country_code', models.CharField(default='+254', max_length=5)),
                ('normalized_phone', models.CharField(blank=True, max_length=20)),
                ('adults', models.PositiveIntegerField(default=1)),
                ('children', models.PositiveIntegerField(default=0)),
                ('travel_date', models.DateField()),
                ('days', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'Booking Customer',
                'verbose_name_plural': 'Booking Customers',
                'indexes': [models.Index(fields=['email'], name='bookings_bo_email_2faf14_idx'), models.Index(fields=['normalized_phone'], name='bookings_bo_normali_2e1d8b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(help_text='Phone number', max_length=20, validators=[bookings.models.validate_phone_number])),
                ('normalized_phone', models.CharField(blank=True, help_text='E.164 formatted phone number', max_length=20)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_picture', cloudinary.models.CloudinaryField(blank=True, help_text='Profile picture', max_length=255, null=True, verbose_name='image')),
                ('bio', models.TextField(blank=True, null=True)),
                ('preferred_language', models.CharField(default='en', help_text='ISO language code', max_length=10)),
                ('communication_preferences', models.JSONField(blank=True, default=dict, help_text='Communication preferences (email, SMS, WhatsApp, etc.)')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_document', cloudinary.models.CloudinaryField(blank=True, help_text='Document for identity verification', max_length=255, null=True, verbose_name='raw')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('license_type', models.CharField(choices=[('PROFESSIONAL', 'Professional'), ('COMMERCIAL', 'Commercial')], default='COMMERCIAL', max_length=20)),
                ('license_expiry', models.DateField(blank=True, null=True)),
                ('available', models.BooleanField(default=True)),
                ('experience_years', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0.0')), django.core.validators.MaxValueValidator(Decimal('5.0'))])),
                ('total_trips', models.PositiveIntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('driver_license_copy', cloudinary.models.CloudinaryField(blank=True, help_text="Copy of driver's license", max_length=255, null=True, verbose_name='raw')),
                ('police_clearance', cloudinary.models.CloudinaryField(blank=True, help_text='Police clearance certificate', max_length=255, null=True, verbose_name='raw')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_account', models.CharField(blank=True, max_length=50, null=True)),
                ('bank_branch', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_methods', models.JSONField(blank=True, default=dict, help_text='Preferred payment methods (M-Pesa, bank transfer, etc.)')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Driver',
                'verbose_name_plural': 'Drivers',
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('tagline', models.CharField(blank=True, max_length=300, null=True)),
                ('description', models.TextField(default='No description available')),
                ('highlights', models.TextField(blank=True, null=True)),
                ('itinerary', models.JSONField(blank=True, default=list)),
                ('inclusions', models.JSONField(blank=True, default=list)),
                ('exclusions', models.JSONField(blank=True, default=list)),
                ('price_per_person', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='KES', max_length=10)),
                ('duration_days', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('duration_nights', models.PositiveIntegerField(default=0)),
                ('max_group_size', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)])),
                ('min_group_size', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MODERATE', 'Moderate'), ('CHALLENGING', 'Challenging'), ('EXTREME', 'Extreme')], default='EASY', max_length=20)),
                ('available', models.BooleanField(default=True)),
                ('featured', models.BooleanField(default=False)),
                ('is_popular', models.BooleanField(default=False)),
                ('max_advance_booking_days', models.PositiveIntegerField(default=365, validators=[django.core.validators.MinValueValidator(1)])),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('video', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='video')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('gallery_images', models.JSONField(blank=True, default=list, help_text='List of additional image URLs')),
                ('departure_point', models.CharField(default='Nairobi', max_length=200)),
                ('destinations_visited', models.TextField(blank=True, null=True)),
                ('eco_friendly', models.BooleanField(default=False)),
                ('carbon_footprint_per_person', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Estimated carbon footprint per person in kg CO2', max_digits=10)),
                ('sustainability_certifications', models.JSONField(blank=True, default=list, help_text='List of sustainability certifications')),
                ('wheelchair_accessible', models.BooleanField(default=False)),
                ('accessibility_features', models.JSONField(blank=True, default=dict, help_text='Detailed accessibility features')),
                ('health_safety_measures', models.JSONField(blank=True, default=dict, help_text='Health and safety measures implemented')),
                ('covid19_protocols', models.JSONField(blank=True, default=dict, help_text='COVID-19 specific protocols')),
                ('is_approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_tours', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tours', to=settings.AUTH_USER_MODEL)),
                ('destinations', models.ManyToManyField(blank=True, related_name='tours', to='bookings.destination')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tours', to='bookings.tourcategory')),
            ],
            options={
                'verbose_name': 'Tour',
                'verbose_name_plural': 'Tours',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking_type', models.CharField(choices=[('TRANSFER', 'Airport Transfer'), ('EXCURSION', 'Excursion'), ('TOUR', 'Tour / Safari')], max_length=20)),
                ('booking_reference', models.CharField(default=bookings.models.generate_booking_reference, editable=False, max_length=50, unique=True)),
                ('num_adults', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('num_children', models.PositiveIntegerField(default=0)),
                ('num_infants', models.PositiveIntegerField(default=0)),
                ('pickup_location', models.CharField(blank=True, max_length=200, null=True)),
                ('pickup_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-90')), django.core.validators.MaxValueValidator(Decimal('90'))])),
                ('pickup_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-180')), django.core.validators.MaxValueValidator(Decimal('180'))])),
                ('dropoff_location', models.CharField(blank=True, max_length=200, null=True)),
                ('dropoff_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-90')), django.core.validators.MaxValueValidator(Decimal('90'))])),
                ('dropoff_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-180')), django.core.validators.MaxValueValidator(Decimal('180'))])),
                ('travel_date', models.DateField(validators=[bookings.models.validate_future_date])),
                ('travel_time', models.TimeField(default=django.utils.timezone.now)),
                ('return_date', models.DateField(blank=True, null=True)),
                ('return_time', models.TimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed'), ('NO_SHOW', 'No Show'), ('IN_PROGRESS', 'In Progress')], default='PENDING', max_length=20)),
                ('special_requests', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('booking_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='KES', max_length=10)),
                ('is_paid', models.BooleanField(default=False)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('carbon_offset_option', models.BooleanField(default=False)),
                ('carbon_offset_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('booking_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='bookings.bookingcustomer')),
                ('destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.destination')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.driver')),
                ('tour', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.tour')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('make', models.CharField(help_text='Vehicle make (e.g., Toyota)', max_length=50)),
                ('model', models.CharField(help_text='Vehicle model (e.g., Hilux)', max_length=50)),
                ('year', models.PositiveIntegerField(help_text='Year of manufacture')),
                ('color', models.CharField(blank=True, max_length=30, null=True)),
                ('license_plate', models.CharField(max_length=20, unique=True)),
                ('vehicle_type', models.CharField(choices=[('SEDAN', 'Sedan'), ('SUV', 'SUV'), ('VAN', 'Van'), ('MINIBUS', 'Minibus'), ('BUS', 'Bus'), ('LUXURY', 'Luxury Vehicle'), ('ELECTRIC', 'Electric Vehicle'), ('HYBRID', 'Hybrid Vehicle')], max_length=20)),
                ('fuel_type', models.CharField(choices=[('PETROL', 'Petrol'), ('DIESEL', 'Diesel'), ('ELECTRIC', 'Electric'), ('HYBRID', 'Hybrid'), ('CNG', 'Compressed Natural Gas')], max_length=20)),
                ('capacity', models.PositiveIntegerField(help_text='Passenger capacity')),
                ('features', models.JSONField(blank=True, default=dict, help_text='Vehicle features (AC, WiFi, etc.)')),
                ('accessibility_features', models.JSONField(blank=True, default=dict, help_text='Accessibility features (wheelchair access, etc.)')),
                ('logbook_copy', cloudinary.models.CloudinaryField(blank=True, help_text='Copy of vehicle logbook', max_length=255, null=True, verbose_name='raw')),
                ('insurance_copy', cloudinary.models.CloudinaryField(blank=True, help_text='Copy of insurance certificate', max_length=255, null=True, verbose_name='raw')),
                ('inspection_certificate', cloudinary.models.CloudinaryField(blank=True, help_text='Vehicle inspection certificate', max_length=255, null=True, verbose_name='raw')),
                ('insurance_expiry', models.DateField(blank=True, null=True)),
                ('inspection_expiry', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('carbon_footprint_per_km', models.DecimalField(decimal_places=3, default=Decimal('0.120'), help_text='CO2 emissions per km in kg', max_digits=6)),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'indexes': [models.Index(fields=['license_plate'], name='bookings_ve_license_2c84e3_idx'), models.Index(fields=['vehicle_type'], name='bookings_ve_vehicle_b8a1bd_idx'), models.Index(fields=['is_active'], name='bookings_ve_is_acti_549903_idx')],
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('destination', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('start_time', models.TimeField(default=django.utils.timezone.now)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('earnings', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('distance', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fuel_consumed', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('carbon_emissions', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('customer_rating', models.PositiveIntegerField(blank=True, null=True, validators=[bookings.models.validate_rating])),
                ('customer_feedback', models.TextField(blank=True, null=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='bookings.booking')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='bookings.driver')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='bookings.vehicle')),
            ],
            options={
                'verbose_name': 'Trip',
                'verbose_name_plural': 'Trips',
            },
        ),
        migrations.AddField(
            model_name='driver',
            name='vehicle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drivers', to='bookings.vehicle'),
        ),
        migrations.AddField(
            model_name='booking',
            name='vehicle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.vehicle'),
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[bookings.models.validate_phone_number])),
                ('inquiry_type', models.CharField(choices=[('GENERAL', 'General Inquiry'), ('BOOKING', 'Booking Question'), ('PAYMENT', 'Payment Issue'), ('COMPLAINT', 'Complaint'), ('PARTNERSHIP', 'Partnership Opportunity'), ('FEEDBACK', 'Feedback'), ('TECHNICAL', 'Technical Support')], default='GENERAL', max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=10)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_messages', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contact Message',
                'verbose_name_plural': 'Contact Messages',
                'indexes': [models.Index(fields=['priority'], name='bookings_co_priorit_b4ac58_idx'), models.Index(fields=['is_resolved'], name='bookings_co_is_reso_80e63b_idx'), models.Index(fields=['assigned_to'], name='bookings_co_assigne_41fd6e_idx')],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], validators=[bookings.models.validate_rating])),
                ('safety_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], null=True)),
                ('cleanliness_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], null=True)),
                ('value_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], null=True)),
                ('comfort_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], null=True)),
                ('punctuality_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], null=True)),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('is_public', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.booking')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.driver')),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_responses', to=settings.AUTH_USER_MODEL)),
                ('tour', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.tour')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'indexes': [models.Index(fields=['rating'], name='bookings_re_rating_a9b587_idx'), models.Index(fields=['is_public'], name='bookings_re_is_publ_70a99a_idx'), models.Index(fields=['is_verified'], name='bookings_re_is_veri_9c3d62_idx'), models.Index(fields=['tour', 'rating'], name='bookings_re_tour_id_a69bfb_idx'), models.Index(fields=['driver', 'rating'], name='bookings_re_driver__7921fd_idx')],
                'unique_together': {('booking', 'tour', 'driver')},
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guest_full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('guest_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('guest_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('normalized_guest_phone', models.CharField(blank=True, max_length=20)),
                ('travel_date', models.DateField(default=django.utils.timezone.now)),
                ('adults', models.PositiveIntegerField(default=1)),
                ('children', models.PositiveIntegerField(default=0)),
                ('days', models.PositiveIntegerField(default=1)),
                ('billing_line1', models.CharField(default='Nairobi', max_length=255)),
                ('billing_city', models.CharField(default='Nairobi', max_length=100)),
                ('billing_state', models.CharField(default='Nairobi', max_length=100)),
                ('billing_postal_code', models.CharField(default='00100', max_length=20)),
                ('billing_country_code', models.CharField(default='KE', max_length=3)),
                ('provider', models.CharField(choices=[('MPESA', 'M-PESA'), ('PAYSTACK', 'Paystack'), ('PAYPAL', 'PayPal'), ('CARD', 'Card Payment'), ('AIRTEL', 'Airtel Money'), ('CASH', 'Cash'), ('BANK', 'Bank Transfer'), ('OTHER', 'Other')], default='PAYSTACK', max_length=20)),
                ('method', models.CharField(choices=[('MPESA', 'M-PESA'), ('PAYSTACK', 'Paystack'), ('PAYPAL', 'PayPal'), ('CARD', 'Card Payment'), ('AIRTEL', 'Airtel Money'), ('CASH', 'Cash'), ('BANK', 'Bank Transfer'), ('OTHER', 'Other')], default='PAYSTACK', max_length=20)),
                ('currency', models.CharField(default='KES', max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('phone_number', models.CharField(blank=True, default='', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('PARTIAL_REFUND', 'Partial Refund')], default='PENDING', max_length=20)),
                ('reference', models.CharField(db_index=True, default='', max_length=100)),
                ('access_code', models.CharField(blank=True, max_length=255, null=True)),
                ('paystack_transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_id', models.CharField(blank=True, default='', max_length=100)),
                ('authorization_code', models.CharField(blank=True, default='', max_length=100)),
                ('raw_response', models.JSONField(blank=True, null=True)),
                ('webhook_verified', models.BooleanField(default=False)),
                ('webhook_received_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(default='Payment for Tour')),
                ('paid_on', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True, null=True)),
                ('payment_channel', models.CharField(blank=True, max_length=50, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('refund_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('refund_reason', models.TextField(blank=True, null=True)),
                ('refunded_on', models.DateTimeField(blank=True, null=True)),
                ('booking', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='bookings.booking')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
                ('tour', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='bookings.tour')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'indexes': [models.Index(fields=['reference'], name='bookings_pa_referen_7743f4_idx'), models.Index(fields=['paystack_transaction_id'], name='bookings_pa_paystac_ac848b_idx'), models.Index(fields=['status'], name='bookings_pa_status_e13a34_idx'), models.Index(fields=['created_at'], name='bookings_pa_created_0175e9_idx'), models.Index(fields=['user', 'status'], name='bookings_pa_user_id_d4eeac_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['category'], name='bookings_to_categor_38a46b_idx'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['difficulty'], name='bookings_to_difficu_cde77a_idx'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['is_popular'], name='bookings_to_is_popu_1fd2ed_idx'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['featured'], name='bookings_to_feature_a3dd32_idx'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['is_approved'], name='bookings_to_is_appr_02c3f7_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['driver', 'date'], name='bookings_tr_driver__31c45f_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['status'], name='bookings_tr_status_491e53_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['date'], name='bookings_tr_date_8257ad_idx'),
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['user'], name='bookings_dr_user_id_699667_idx'),
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['license_number'], name='bookings_dr_license_778984_idx'),
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['normalized_phone'], name='bookings_dr_normali_e2b42c_idx'),
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['rating'], name='bookings_dr_rating_739e05_idx'),
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['available'], name='bookings_dr_availab_c6468b_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_reference'], name='bookings_bo_booking_8a7545_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['travel_date'], name='bookings_bo_travel__83d735_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='bookings_bo_status_233e96_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_customer', 'travel_date'], name='bookings_bo_booking_67f870_idx'),
        ),
    ]
